import React from 'react';
import { queryData } from '../../libs/library';
import Head from 'next/head';
import BlogCard from '../../components/BlogCard';


export default function Tag({ tag }) {

    return (
        <>
            <Head>
                <title>{tag.title}</title>
                <meta name="list blog tag" content="Generated by create next app" />
                <link rel="icon" href="/logo.ico" />
            </Head>

            <main className='mt-4 xl:px-[32px] lg:px-[26px] px-[10px] mb-8'>
                <header className='mb-7'>
                    <h1 style={{ background: tag.favoriteColor ? tag.favoriteColor.hex : '#fff' }} className='font-title md:text-[35px] text-[25px] pb-2 pt-3 px-4 leading-none text-center inline-block rounded-md mb-4'>
                        {tag.title}
                    </h1>
                    <p className='font-code md:text-[25px] text-[20px] text-[#b2becd] mt-[-10px]'>{tag.description}</p>
                </header>

                <div>
                    <ul className='grid grid-cols-1 sm:grid-cols-1 justify-items-center md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5 gap-y-[55px]'>
                        {tag.posts.map(post => {
                            return (<li className="blogCard rounded hover:scale-105 ease-in duration-300 xl:w-full max-w-[400px]" key={post._id}>
                                <BlogCard post={post} />
                            </li>)
                        }
                        )}
                    </ul>

                </div>
            </main>
        </>
    )
}

export async function getStaticPaths() {
    const query = `*[_type=="tag"]`;
    const tags = await queryData(query)

    const paths = tags.map(tag => {
        return {
            params: { tag: tag.title },
        }
    })

    // { fallback: false } means other routes should 404
    return { paths, fallback: false }
}


// `getStaticPaths` requires using `getStaticProps`
export async function getStaticProps(context) {
    const { tag } = context.params;

    const queryLabsWithTag = `*[_type == "tag"  && title == "${tag}"]{
        _id, title, description, favoriteColor,
        "posts": *[_type == "post" && references(^._id)]{
            ...,
            tag[]->
        } | order(_createdAt desc)
    }`
    const res = await queryData(queryLabsWithTag);

    const data = res.find(item => {
        return item.title == tag;
    })

    return {
        props: {
            tag: data
        }
    }
}